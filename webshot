#!/usr/bin/env python3

# =============================================================================
#                    webshot - Capture Website Screenshots
# =============================================================================

import argparse
import logging
import os
import time
import sys
import yaml
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait


def capture_screenshot(driver, url, output_path, width, max_height, delay, scroll_delay, scroll_step, content_xpath, offset_height):
    logging.info(f'Capturing screenshot for {url}')

    # Load the page
    driver.get(url)
    driver.set_window_size(width, 1200)
    time.sleep(delay)

    if content_xpath:
        scrollable_div = driver.find_element(By.XPATH, content_xpath)
        get_scroll_height_script = 'return arguments[0].scrollHeight'
        scroll_to_script = 'arguments[0].scrollTo(0, {0})'
    else:
        scrollable_div = driver.find_element(By.TAG_NAME, 'body')
        get_scroll_height_script = 'return document.body.scrollHeight'
        scroll_to_script = 'window.scrollTo(0, {0})'

    # Scroll through the page incrementally to trigger lazy loading
    last_height = driver.execute_script(get_scroll_height_script, scrollable_div)
    logging.info(f'{last_height}, {last_height}')
    scroll_position = 0
    while scroll_position < last_height:
        # Scroll down in increments and wait for dynamic content to load
        driver.execute_script(scroll_to_script.format(scroll_position), scrollable_div)
        time.sleep(scroll_delay)
        scroll_position += scroll_step  # Adjust scrolling step based on your needs

        # Capture current height and compare with max allowed height
        new_height = driver.execute_script(get_scroll_height_script, scrollable_div)
        logging.info(f'Page height: {new_height}, Scroll position: {scroll_position}')
        if new_height > last_height:
            last_height = new_height
        if last_height > max_height:
            last_height = max_height
            logging.info(f'Page height reaches the maximum height allowance ({max_height}px)')
            break

    last_height += offset_height
    logging.info(f'Final page height is {last_height}px')

    # After final scroll, reset to the top and adjust window size to total height
    driver.execute_script('window.scrollTo(0, 0);', scrollable_div)
    driver.set_window_size(width, last_height)
    time.sleep(scroll_delay)

    logging.info('Capturing a screenshot')

    # Capture the screenshot
    driver.save_screenshot(output_path)

    logging.info(f"Captured: {output_path}")

def login(driver, login_url, username_xpath, password_xpath, submit_xpath, username, password, login_delay):
    driver.get(login_url)
    if username and username_xpath:
        username_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, username_xpath)))
        username_input.send_keys(username)
    if password and password_xpath:
        password_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, password_xpath)))
        password_input.send_keys(password)
    if submit_xpath:
        submit_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, submit_xpath)))
        submit_button.click()
    time.sleep(login_delay)

def check_cookie_validity(driver, protected_url, login_url, login_delay):
    driver.get(protected_url)
    time.sleep(login_delay)
    # Check if the protected page loaded successfully without being redirected to the login page
    return driver.current_url != login_url

def main():
    parser = argparse.ArgumentParser(description='Capture website screenshots')
    parser.add_argument('-c', '--config', help='Config file path (YAML)')
    parser.add_argument('url', nargs='?', help='URL of the target webpage')
    parser.add_argument('-o', '--output', help='Output file path for the screenshot')
    parser.add_argument('-v', '--verbose', action='count', default=0, help='Enable verbose output (-v info, -vv debug)')
    args = parser.parse_args()

    # Set up logging
    if args.verbose == 1:
        logging_level = logging.INFO
    elif args.verbose >= 2:
        logging_level = logging.DEBUG
    else:
        logging_level = logging.WARNING

    logging.basicConfig(stream=sys.stdout, level=logging_level, format='%(message)s')

    # Load config from YAML file if provided
    config = {}
    if args.config:
        with open(args.config) as f:
            config = yaml.safe_load(f)
            logging.info('Loaded configuration from file')

    # Extract configuration values
    login_url = config.get('login_url')
    username_xpath = config.get('username_xpath', '//*[@id="username"]')
    password_xpath = config.get('password_xpath', '//*[@id="password"]')
    submit_xpath = config.get('submit_xpath')
    username = config.get('username')
    password = config.get('password')
    width = config.get('width', 1920)
    delay = config.get('delay', 3)
    login_delay = config.get('login_delay', 3)
    output_dir = config.get('output', '')
    g_max_height = config.get('max_height', 10000)
    g_scroll_delay = config.get('scroll_delay', 3)
    g_scroll_step = config.get('scroll_step', 1200)
    g_content_xpath = config.get('content_xpath')
    g_offset_height = config.get('offset_height', 0)

    # Override or set by command-line options
    if args.url:
        config['screenshots'] = [{
            'url': args.url,
            'filename': args.output or 'screenshot.png',
            'max_height': g_max_height,
            'scroll_delay': g_scroll_delay,
            'scroll_step': g_scroll_step,
            'content_xpath': g_content_xpath,
            'offset_height': g_offset_height,
        }]

    if 'screenshots' not in config:
        logging.error('No screenshots configuration found. Provide a config file or URL and output.')
        sys.exit(1)

    screenshots_tmp = config.get('screenshots', [])
    screenshots = []

    for s in screenshots_tmp:
        url = s.get('url')
        filename = s.get('filename')
        max_height = s.get('max_height', g_max_height)
        scroll_delay = s.get('scroll_delay', g_scroll_delay)
        scroll_step = s.get('scroll_step', g_scroll_step)
        content_xpath = s.get('content_xpath', g_content_xpath)
        offset_height = s.get('offset_height', g_offset_height)
        screenshots.append({
            'url': url,
            'filename': filename,
            'max_height': max_height,
            'scroll_delay': scroll_delay,
            'scroll_step': scroll_step,
            'content_xpath': content_xpath,
            'offset_height': offset_height,
        })

    # Create the output directory if it doesn't exist
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)

    logging.info('Preparing WebDriver')

    # Set up the WebDriver
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Always run in headless mode
    driver = webdriver.Chrome(options=chrome_options)
    driver.set_script_timeout(300)
    driver.implicitly_wait(10)

    try:
        if login_url and username and password and username_xpath and password_xpath and submit_xpath:
            logging.info('Attempt login procedure')
            login(driver, login_url, username_xpath, password_xpath, submit_xpath, username, password, login_delay)

        # Capture screenshots
        for screenshot in screenshots:
            url = screenshot['url']
            output_filename = screenshot['filename']
            output_path = os.path.join(output_dir, output_filename)
            max_height = screenshot['max_height']
            scroll_delay = screenshot['scroll_delay']
            scroll_step = screenshot['scroll_step']
            capture_screenshot(driver, url, output_path, width, max_height, delay, scroll_delay, scroll_step, content_xpath, offset_height)
    finally:
        driver.quit()

if __name__ == '__main__':
    main()
